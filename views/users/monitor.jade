extends ../Layout_Users.jade
block content
  script.
    var myChart;
    var stop = true;
    function addData(chart, label, data) {
      var chart = myChart;
      var label = "nuevo";
      var data = Math.random()*100;
      
      for (i = 0; i < chart.data.labels.length-1; i++) {
        chart.data.labels[i] = chart.data.labels[i+1];
      }
      chart.data.labels[chart.data.labels.length-1] = label;
      //chart.data.labels.push(label);
      chart.data.datasets.forEach((dataset) => {
        for (i = 0; i < dataset.data.length-1; i++) {
          dataset.data[i] = dataset.data[i+1];
        }
        dataset.data[dataset.data.length] = data;
        //dataset.data.push(data);
      });
      chart.update();
    }
    var idAgente = "x.x.x.x";
    function writeNext(id) {
      if (id != idAgente) {
        return;
      }
      addData();
      setTimeout(function() {
        writeNext(id);
      }, 2000);
    }
    
    $(document).ready(function(){
      

      $.getJSON('/agentes', { get_param: 'value' }, function(json) {
        $.each(json, function (index, item) {
          var eachrow = "<option value='" 
                      + item['ip'] + "'>" +  item['nombre'] + ": " + item['ip']
                      + "</option>";
          $('#agentes').append(eachrow);
        });
      });
      
      //var myChart;
      
      
      
      

      /*function removeData(chart) {
        
        chart.data.labels.pop();
        chart.data.datasets.forEach((dataset) => {
          dataset.data.pop();
        });
        chart.update();
      }*/
      
      
      
      $('#form1').on('submit', function (e) {
        getNuevo = null;
        //clear content from canvas div
        //$('#divCanvas').html('');
        //$('#divCanvas').html("<canvas id='myChart' width='400' height='400'></canvas>")
      // keep the form from submitting synchronously
        e.preventDefault();        
      //petición post del formulario 1, post, '/nuevo_agente'
        $.ajax({
          url: $('#form1').attr('action'),
          method: $('#form1').attr('method'),
          data: $('#form1').serialize()
        })
        .done(function (response) {
          var memvalues = [];
          for (var i = 0; i < response.length; i++) {
            var obj = response[i];
            for (var key in obj) {
              if (key == "memoria") {
                memvalues.push(obj[key]);
                var attrName = key;
                console.log(attrName);
                var attrValue = obj[key];
                console.log(attrValue);
              }
            }
          }
          
          for (i = 0; i < 10; i++) {
            if (i >= memvalues.length) {
              memvalues.push(0);
            }
          }
          
          rmemvalues = memvalues.reverse();
          
          console.log(response);

          var ctx = document.getElementById('myChart').getContext('2d');
          ctx.height = 40;
          myChart = new Chart(ctx, {
              type: 'line',
              data: {
                  labels: [1,2,3,4,5,6,7,8,9,10],
                  datasets: [{
                      label: '# of Votes',
                      data: rmemvalues,
                      backgroundColor: 'rgba(80, 140, 132, 0.5)',
                      lineTension: 0.1,
                      borderColor:
                          'rgba(255, 99, 132, 1)',
                      borderWidth: 1
                  }]
              },
              options: {
                  maintainAspectRatio: false,
                  responsive : true,
                  scales: {
                    yAxes: [{
                      ticks: {
                        beginAtZero: true
                      }
                    }]
                  },
                  animation: {
                    easing:'linear',
                    duration: 30
                  }
              }
          });
          if (response.length > 0) {
            if (idAgente != response[0]["agente"]) {
              idAgente = response[0]["agente"];
              writeNext(response[0]["agente"]);
            }
          }
        })
        .fail(function(error){
          console.log('failed: ', arguments);
          if(error.responseText == 'showAlert'){
            alert("No se pudo establecer comunicación con el servidor");
          }
        })
      });
    });
  br
  br
  br
  #div1
    form#form1(method='POST', action='/resourcesUtil')
      label(for='cars') Selecciona el agente SNMP
      select#agentes.selectpicker(name='agente')
      input(type='submit', value='Ver')
  #divCanvas
    canvas#myChart()
