extends ../Layout_Users.jade
block content
  script.
    var chartMemoria;
    var chartCPU;
    var chartDisco;
    var chartAnchoBanda;
    var hasDiskChart = false;
    var chartHeight = "200px";
    
    var myColors = [
      'rgba(0, 0, 255, 1)',
      'rgba(0, 255, 0, 1)',
      'rgba(255, 0, 0, 1)',
      'rgba(0, 255, 255, 1)',
      'rgba(255, 0, 255, 1)',
    ];
    
    function addData(chart, label, data) {
      //Obtiene nueva información de los recursos del agente
      $.ajax({
        url: "/newResourcesUtil",
        method: 'POST',
        data: $('#form1').serialize()
      })
      .done(function (response) {
        //actualiza información en chartMemoria
        var chart = chartMemoria;
        var label = response[0]["date"].split(".")[0];
        var memoria = response[0]["memoria"];
        console.log("memoria: " + memoria);
        var newLabels = [];
        for (var i = 0; i < chart.data.labels.length-1; i++) {
          //chart.data.labels[i] = chart.data.labels[i+1];
          newLabels.push(chart.data.labels[i+1]);
        }
        newLabels.push(label);
        chart.data.labels = newLabels;
        //chart.data.labels[chart.data.labels.length-1] = label;
        var newData = [];
        //console.log("data.length = " + chart.data.datasets[0].data.length);
        for (var i = 0; i < chart.data.datasets[0].data.length-1; i++) {
          //chart.data.datasets[0].data[i] = chart.data.datasets[0].data[i+1];
          newData.push(chart.data.datasets[0].data[i+1]);
        }
        newData.push(memoria);
        chart.data.datasets[0].data = newData;
        chart.update();
        
        
        //actualiza información en chartCPU
        chart = chartCPU;
        //label = "nuevoCPU";
        cpuLoad = response[0]["cpu"];
        console.log("carga del cpu: " + cpuLoad);
        
        var newLabels = [];
        for (var i = 0; i < chart.data.labels.length-1; i++) {
          //chart.data.labels[i] = chart.data.labels[i+1];
          newLabels.push(chart.data.labels[i+1]);
        }
        newLabels.push(label);
        chart.data.labels = newLabels;
        /*for (var i = 0; i < chart.data.labels.length-1; i++) {
          chart.data.labels[i] = chart.data.labels[i+1];
        }
        chart.data.labels[chart.data.labels.length-1] = label;*/
        //chart.data.labels.push(label);
        
        var newData = [];
        //console.log("data.length = " + chart.data.datasets[0].data.length);
        for (var i = 0; i < chart.data.datasets[0].data.length-1; i++) {
          //chart.data.datasets[0].data[i] = chart.data.datasets[0].data[i+1];
          newData.push(chart.data.datasets[0].data[i+1]);
        }
        newData.push(cpuLoad);
        chart.data.datasets[0].data = newData;
        chart.update();
        
        
        //actualizacion en chart disco
        if (!hasDiskChart) {
          if (response[0].hasOwnProperty('disco')) {
            hasDiskChart = true;
            $("#divCanvasDisco").append("<canvas id='chartDisco'></canvas>");
              var ctx = document.getElementById('chartDisco').getContext('2d');
              ctx.height = chartHeight;
              chartDisco = new Chart(ctx, {
                  type: 'line',
                  data: {
                      labels: ['?','?','?','?','?','?','?','?','?','?'],
                      datasets: [{
                          label: '% de uso del almacenamiento masivo',
                          data: [0,0,0,0,0,0,0,0,0,0],
                          backgroundColor:  'rgba(240, 5, 240, 0.4)',
                          lineTension: 0,
                          borderColor:
                              'rgba(120, 230, 180, 100)',
                          borderWidth: 1
                      }]
                  },
                  options: {
                      maintainAspectRatio: false,
                      responsive : true,
                      scales: {
                        yAxes: [{
                          ticks: {
                            beginAtZero: true
                          }
                        }]
                      },
                      animation: {
                        easing:'linear',
                        duration: 40
                      }
                  }
              });
          }
        }
        
        if (hasDiskChart) {
          //actualiza información en chartCPU
          chart = chartDisco;
          //label = "nuevoDisco";
          diskUsage = response[0]["disco"];
          console.log("uso del disco: " + diskUsage);
          
          var newLabels = [];
          for (var i = 0; i < chart.data.labels.length-1; i++) {
            //chart.data.labels[i] = chart.data.labels[i+1];
            newLabels.push(chart.data.labels[i+1]);
          }
          newLabels.push(label);
          chart.data.labels = newLabels;
          /*for (i = 0; i < chart.data.labels.length-1; i++) {
            chart.data.labels[i] = chart.data.labels[i+1];
          }
          chart.data.labels[chart.data.labels.length-1] = label;*/
          //chart.data.labels.push(label);
          
          var newData = [];
          //console.log("data.length = " + chart.data.datasets[0].data.length);
          for (i = 0; i < chart.data.datasets[0].data.length-1; i++) {
            //chart.data.datasets[0].data[i] = chart.data.datasets[0].data[i+1];
            newData.push(chart.data.datasets[0].data[i+1]);
          }
          newData.push(diskUsage);
          chart.data.datasets[0].data = newData;
          chart.update();
        }
        
        
        //Actualiza la información en chart anchoBanda
        chart = chartAnchoBanda;
        //label = "nuevoBW";
        
        
        
        if (chart.data.datasets.length == 0) {
          for (var x = 0; x < response[0].anchoBanda.length; x++) {
            var dataset = {
              label: response[0].anchoBanda[x].ifDescr,
              data: [0,0,0,0,0,0,0,0,0,0],
              fill: false,
              lineTension: 0,
              borderColor: myColors[x],
              borderWidth: 1.5
            }
            chart.data.datasets.push(dataset);
          }
        }

        
        var newLabels = [];
        for (var i = 0; i < chart.data.labels.length-1; i++) {
          //chart.data.labels[i] = chart.data.labels[i+1];
          newLabels.push(chart.data.labels[i+1]);
        }
        newLabels.push(label);
        chart.data.labels = newLabels;
        
        /*for (var i = 0; i < chart.data.labels.length-1; i++) {
          chart.data.labels[i] = chart.data.labels[i+1];
        }
        chart.data.labels[chart.data.labels.length-1] = label;*/
        
        for (var n = 0; n < response[0].anchoBanda.length; n++) {
          for (var j = 0; j < chart.data.datasets.length; j++) {
            if (chart.data.datasets[j].label == response[0].anchoBanda[n].ifDescr) {
              console.log(chart.data.datasets[j].label + ": " + response[0].anchoBanda[n].utilizacion);
              //chart.data.datasets[j].data.push(response[i].anchoBanda[n].utilizacion);
              
              
              var newData = [];
              //console.log("data.length = " + chart.data.datasets[0].data.length);
              for (var i = 0; i < chart.data.datasets[j].data.length-1; i++) {
                //chart.data.datasets[0].data[i] = chart.data.datasets[0].data[i+1];
                newData.push(chart.data.datasets[j].data[i+1]);
              }
              newData.push(response[0].anchoBanda[n].utilizacion);
              chart.data.datasets[j].data = newData;
              break;
            }
          }
        }
        chart.update();
        
        
      })
      .fail(function(error){
        console.log('failed: ', arguments);
        if(error.responseText == 'showAlert'){
          alert("No se pudo establecer comunicación con el agente");
          window.location.href = "/monitor";
        }
      });    
    }
    var idAgente = "x.x.x.x";
    
    //funcion que solicita nueva información de los recursos cada cierto tiempo
    function writeNext(id) { 
      if (id != idAgente) {
        return;
      }
      addData();
      setTimeout(function() {
        writeNext(id);
      }, 31000);
    }
    
    
    $(document).ready(function() {
      $.getJSON('/agentes', { get_param: 'value' }, function(json) {
        $.each(json, function (index, item) {
          var eachrow = "<option value='" 
                      + item['ip'] + "'>" +  item['nombre'] + ": " + item['ip']
                      + "</option>";
          $('#agentes').append(eachrow);
        });
      });
      
      $('#form1').on('submit', function (e) {
        e.preventDefault();        
      //petición post del formulario 1, post, '/nuevo_agente'
        $.ajax({
          url: $('#form1').attr('action'),
          method: $('#form1').attr('method'),
          data: $('#form1').serialize()
        })
        .done(function (response) {
          
          var memvalues = [];
          var cpuvalues = [];
          var diskvalues = [];
          var dateLabels = [];
          //var bwvalues = [];
          
          var bwChartDesc;
          
          $("#divCanvasDisco").html("");
          for (var i = 0; i < response.length; i++) {
            
            var obj = response[i];
            
            //revisa si la información del uso de recursos contien "disco"
            if (i == 0) {
              if (obj.hasOwnProperty('disco')) {
                //console.log("Parece ser un sistema Linux");
                $("#divCanvasDisco").append("<canvas id='chartDisco'></canvas>");
                hasDiskChart = true;
              } else {
                //console.log("Parece ser un sistema Cisco");
                hasDiskChart = false;
              }
            }
            
            
            for (var key in obj) {
              if (key == "memoria") {
                memvalues.push(obj[key]);
                var attrName = key;
                console.log(attrName);
                var attrValue = obj[key];
                console.log(attrValue);
              } else if (key == "cpu") {
                cpuvalues.push(obj[key]);
                var attrName = key;
                console.log(attrName);
                var attrValue = obj[key];
                console.log(attrValue);
              } else if (key == "disco") {
                diskvalues.push(obj[key]);
                var attrName = key;
                console.log(attrName);
                var attrValue = obj[key];
                console.log(attrValue);
              } else if (key == "date") {
                dateLabels.push(obj[key].split(".")[0]);
                var attrName = key;
                console.log(attrName);
                var attrValue = obj[key];
                console.log(attrValue);
              } 
            }
          }
          
          
          //prepara los datasets para el chart de ancho de banda
          /*var dataset = {
            label: response[0].anchoBanda[x].ifDescr,
            data: rdiskvalues,
            backgroundColor: 'rgba(100, 130, 200, 0.9)',
            lineTension: 0,
            borderColor:
                'rgba(120, 230, 180, 100)',
            borderWidth: 1
          }*/
          
          var bwdatasets = [];
          for (var i = 0; i < response.length; i++) {
            if (i == 0) {
              for (var x = 0; x < response[i].anchoBanda.length; x++) {
                var dataset = {
                  label: response[i].anchoBanda[x].ifDescr,
                  data: [],
                  fill: false,
                  lineTension: 0,
                  borderColor: myColors[x],
                  borderWidth: 1.5
                }
                bwdatasets.push(dataset);
              }
            }
            for (var n = 0; n < response[i].anchoBanda.length; n++) {
              for (var j = 0; j < bwdatasets.length; j++) {
                if (bwdatasets[j].label == response[i].anchoBanda[n].ifDescr) {
                  console.log('!');
                  bwdatasets[j].data.push(response[i].anchoBanda[n].utilizacion);
                  break;
                }
              }
            }
          }
          //console.log(bwdatasets);
          
          
          //rellena con 0 los lugares sin datos
          for (i = 0; i < 10; i++) {
            if (i >= memvalues.length) {
              memvalues.push(0);
            }
            if (i >= cpuvalues.length) {
              cpuvalues.push(0);
            }
            if (i >= dateLabels.length) {
              dateLabels.push(0);
            }
            if (hasDiskChart) {
              if (i >= diskvalues.length) {
                diskvalues.push(0);
              }
            }
          }
          for (var i = 0; i < bwdatasets.length; i++) {
            for (var x = 0; x < 10; x++) {
              if (x >= bwdatasets[i].data.length) {
                bwdatasets[i].data.push(0);
              }
            }
          }
          //console.log(bwdatasets);
          
          
          //Cambia el orden de los elementos en los datos de las graficas
          rmemvalues = memvalues.reverse();
          rcpuvalues = cpuvalues.reverse();
          rdateLabels = dateLabels.reverse();
          if (hasDiskChart) {
            rdiskvalues = diskvalues.reverse();
          }
          for (var i = 0; i < bwdatasets.length; i++) {
            bwdatasets[i].data = bwdatasets[i].data.reverse();
          }
          //console.log(bwdatasets);
          //console.log(response);
          //console.log(rmemvalues);
          
          //configuración del chart memoria
          var ctx = document.getElementById('chartMemoria').getContext('2d');
          //ctx.height = "400px";
          chartMemoria = new Chart(ctx, {
              type: 'line',
              data: {
                  labels: rdateLabels,
                  datasets: [{
                      label: '% Memoria Usada en el dispositivo',
                      data: rmemvalues,
                      backgroundColor: 'rgba(5, 10, 240, 0.4)',
                      lineTension: 0.1,
                      borderColor: 'rgba(0, 0, 255, 1)',
                      borderWidth: 1
                  }]
              },
              options: {
                  maintainAspectRatio: false,
                  responsive : true,
                  scales: {
                    yAxes: [{
                      ticks: {
                        beginAtZero: true
                      }
                    }]
                  },
                  animation: {
                    easing:'linear',
                    duration: 40
                  }
              }
          });
          chartMemoria.canvas.parentNode.style.height = chartHeight;
          
          
          //configuración del chart CPU
          var ctx = document.getElementById('chartCPU').getContext('2d');
          //ctx.height = chartHeight;
          chartCPU = new Chart(ctx, {
              type: 'line',
              data: {
                  labels: rdateLabels,
                  datasets: [{
                      label: 'Carga del CPU',
                      data: rcpuvalues,
                      backgroundColor: 'rgba(10, 240, 5, 0.4)',
                      lineTension: 0.2,
                      borderColor:
                          'rgba(0, 255, 0, 1)',
                      borderWidth: 1
                  }]
              },
              options: {
                  maintainAspectRatio: false,
                  responsive : true,
                  scales: {
                    yAxes: [{
                      ticks: {
                        beginAtZero: true
                      }
                    }]
                  },
                  animation: {
                    easing:'linear',
                    duration: 40
                  }
              }
          });
          chartCPU.canvas.parentNode.style.height = chartHeight;
          
          //configuración del chart Disco
          if (hasDiskChart) {
            var ctx = document.getElementById('chartDisco').getContext('2d');
            //ctx.height = chartHeight;
            chartDisco = new Chart(ctx, {
                type: 'line',
                data: {
                    labels: rdateLabels,
                    datasets: [{
                        label: '% de uso del almacenamiento masivo',
                        data: rdiskvalues,
                        backgroundColor: 'rgba(240, 5, 240, 0.4)',
                        lineTension: 0,
                        borderColor:
                            'rgba(255, 0, 255, 1)',
                        borderWidth: 1
                    }]
                },
                options: {
                    maintainAspectRatio: false,
                    responsive : true,
                    scales: {
                      yAxes: [{
                        ticks: {
                          beginAtZero: true
                        }
                      }]
                    },
                    animation: {
                      easing:'linear',
                      duration: 40
                    }
                }
            });
            chartDisco.canvas.parentNode.style.height = chartHeight;
          }
          
          
          
          //configuración del chart ancho de banda
          var ctx = document.getElementById('chartAnchoBanda').getContext('2d');
          //ctx.height = chartHeight;
          chartAnchoBanda = new Chart(ctx, {
              type: 'line',
              data: {
                  labels: rdateLabels,
                  datasets: bwdatasets
              },
              options: {
                  maintainAspectRatio: false,
                  responsive : true,
                  scales: {
                    yAxes: [{
                      ticks: {
                        beginAtZero: true
                      }
                    }]
                  },
                  animation: {
                    easing:'linear',
                    duration: 40
                  }
              }
          });
          chartAnchoBanda.canvas.parentNode.style.height = chartHeight;
          
          //inicia la función recursiva que carga nuevos valores cada cierto tiempo
          if (idAgente !=  $( "#agentes" ).val()) {
            idAgente = $( "#agentes" ).val();
            writeNext($( "#agentes" ).val());
          }
        })
        .fail(function(error) {
          console.log('failed: ', arguments);
          if(error.responseText == 'showAlert'){
            alert("No se pudo establecer comunicación con el servidor");
          }
        });
      });
    });
  #div1
    form#form1(method='POST', action='/resourcesUtil')
      label(for='agente') Selecciona el agente SNMP
      select#agentes.selectpicker(name='agente')
      input(type='submit', value='Actualizar')
  hr(style="border: 1px solid rgba(10,220,50,0.4); border-radius: 1px;")
  #divCanvasMemoria
    canvas#chartMemoria
  hr
  #divCanvasCPU
    canvas#chartCPU
  hr
  #divCanvasAnnchoBanda
    canvas#chartAnchoBanda
  hr
  #divCanvasDisco
